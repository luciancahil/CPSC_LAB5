#
# Calling conventions:
#     %rdi, %rsi, %rdx, %rcx, %r8, %r9, %r10, %r11 and %rax are caller saved
#     %rbx, %rbp, %r12, %r13, %r14 are callee saved
#     %rsp can not be used except for its normal use as a stack pointer.
#     argument are passed through registers %rdi, %rsi, %rdx in this order.
#     values are returned through %rax
#
.pos 0x100

main:	
	xorq   %rdi, %rdi        # %rdi = 0
	mrmovq size(%rdi), %rdi  # %rdi = size
	
	irmovq bottom,  %rsp     # initialize stack
	call   heapsort
	halt

#
# get_element
#     %rdi: element index
# returns:
#     %rax: the element

get_element:
    irmovq $8, %rax
	mulq   %rax, %rdi
	mrmovq heap(%rdi), %rax
	ret
	
#
# put_element
#     %rdi: element index
#     %rsi: element

put_element:
    irmovq $8, %rax
	mulq   %rax, %rdi
	rmmovq %rsi, heap(%rdi)
	ret


#
# Check_child
#     %rdi: child index
#     %rsi: index of highest
#     %rdx: last
# Returns:
#     %rax: true if child <= last && heap[highest] < heap[child]
#
check_child:
	pushq  %rbx

	rrmovq %rdi, %rbx       # if child <= last, we can continue
	subq   %rdx, %rbx
	jle     check_child_continue

	xorq %rax, %rax
	popq %rbx
	ret

check_child_continue:
	call get_element       # get heap[child]
	rrmovq %rax, %rcx

	rrmovq %rsi, %rdi      # get heap[highest]
	call get_element      
	rrmovq %rax, %rbx

	subq   %rbx, %rcx      # if heap[child] > heap[highest], return 1
	jg     check_child_output_one
	
	xorq   %rax, %rax      # return 0
	jmp check_child_finish

check_child_output_one:        # return 1
	irmovq $1,   %rax

check_child_finish:
	popq %rbx
	ret
	
#
# Heapify_node
#     %rdi: index
#     %rsi: last
#
# Local variables:
#     %r9: index
#     %r10: highest
#     %r11: last
#
heapify_node:
	rrmovq %rdi, %r10       # %r10 = highest
	rrmovq %rsi, %r11       # %r11 = last
	rrmovq %rdi, %r9

heapify_loop:
	rrmovq %r9, %rdi       # left_child = 2 * index + 1
	irmovq $1,   %r8
	rrmovq %r10, %rsi
	rrmovq %r11, %rdx
	addq   %rdi, %rdi
	addq   %r8,  %rdi


	pushq  %rdi             # save this as we'll need it after the call
	call   check_child
	popq   %rdi
	andq   %rax, %rax

	je     heapify_skip1    # highest = left_child (if condition ok)
	rrmovq %rdi, %r10       

heapify_skip1:
	rrmovq %r9, %rdi       # right_child = 2 * index + 2
	irmovq $2,   %r8	
	rrmovq %r10, %rsi
	rrmovq %r11, %rdx
	addq   %rdi, %rdi
	addq   %r8,  %rdi


	pushq  %rdi             # save this as we'll need it after the call
	call   check_child
	popq  %rdi
	andq   %rax, %rax
	je     heapify_skip2
	rrmovq %rdi, %r10       # highest = right_child (if condition ok)

heapify_skip2:
	rrmovq %r10, %rdi
	subq   %r9, %rdi
	jne     heapify_continue
	ret

heapify_continue:
    irmovq $8, %rax                 # rax = 8
	rrmovq %r10, %rdi
    mulq %rax, %r9                 # r9 *= 8
    mulq %rax, %rdi                 # rdi *= 8
    mrmovq heap(%r9), %rdx         # r10 = heap[r9]
    mrmovq heap(%rdi), %rcx         # r11 = heap[rdi]
    rmmovq %rcx, heap(%r9)         # heap[r9] = r11 = heap[r9]
    rmmovq %rdx, heap(%rdi)         # heap[rdi] = r10 = heap[r9]	
	

	rrmovq %r10, %r9
	jmp    heapify_loop
	
#
# Heapify_array
#     %rdi: last
#
heapify_array:
	pushq  %r12             # Save %r12 and use it to store 'last'
	pushq  %rbx             # Save %rbx before using it for i
	rrmovq %rdi, %r12

	irmovq $1, %rsi		# %rdi = last - 1
	subq   %rsi, %rdi
	irmovq $2, %rsi		# %rdi = (last - 1)/2
	divq   %rsi, %rdi
	rrmovq %rdi, %rbx       # i = %rdi
	
ha_loop:
	andq   %rbx, %rbx       # check if i < 0
	jge     ha_continue
	popq   %rbx
	popq   %r12
	ret

ha_continue:
	rrmovq %rbx, %rdi       # Set %rdi = i, %rsi = last      
	rrmovq %r12, %rsi
	pushq  %rdi
	call   heapify_node     # Heapify the node
        popq   %rdi
	
	irmovq $1, %rdi         # i--
	subq   %rdi, %rbx
	jmp    ha_loop
	
#
# Extract_max
#     %rdi: last
#
extract_max:
    irmovq $8, %rdx
    irmovq $0, %rax
	irmovq $1, %rcx
	pushq  %rbx		# Save %rax before using it for max
	
	mulq   %rdi, %rdx
	mrmovq heap(%rax), %rbx
	mrmovq heap(%rdx), %r8
	rrmovq %rdi, %rsi	# %rsi = last - 1
	subq   %rcx, %rsi
	subq   %rcx, %rsi
	rmmovq %r8, heap(%rax)



	xorq   %rdi, %rdi       # %rdi = 0
	call   heapify_node     # Heapify the root

	rrmovq %rbx, %rax       # Set return value to max
	popq   %rbx
	ret

#
# Heapsort
#    %rdi: Number of entries in the array
#
heapsort:
	pushq  %rbx
	irmovq 1, %rsi
	subq   %rsi, %rdi	# %rdi is now the index of the last element
	jle    hs_ret		# If there were 1 or 0 entries, we are done
	rrmovq %rdi, %rbx       # %rbx (i) = last
	call   heapify_array    # heapify_array(last)

hs_loop:
	andq   %rbx, %rbx	# Test if i < 0
	jge     hs_continue
hs_ret:	popq   %rbx
	ret

hs_continue:
	rrmovq %rbx, %rdi       # max = extract_max(i)
	call   extract_max

	irmovq $8, %r10
	rrmovq %rbx, %rsi       # heap[i] = max
	mulq   %r10, %rsi
	irmovq $1, %rdi         # i--
    rmmovq %rax, heap(%rsi)

	subq   %rdi, %rbx
	jmp    hs_loop
	popq   %rbx
	ret

#
# Array to sort
#
.pos 0x1000
heap:	
	.quad	0x75656
	.quad	0x3a32
	.quad	0x49ad9
	.quad	0xf5339
	.quad	0xd90ff

size:   .quad 5
	
#
# Stack (32 thirty-two bit words is more than enough here).
#
.pos 0x3000
top:	            .quad 0x00000000		# top of stack.
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
bottom:             .quad 0x00000000		# bottom of stack.

# With stalling original: 3303
# With Stalling Current: 2038
